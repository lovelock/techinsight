<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>In-Action on Tech In Sight</title><link>https://techinsight.pages.dev/tags/in-action/</link><description>Recent content in In-Action on Tech In Sight</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sat, 28 Mar 2020 12:56:22 +0800</lastBuildDate><atom:link href="https://techinsight.pages.dev/tags/in-action/index.xml" rel="self" type="application/rss+xml"/><item><title>Springboot使用内置和独立tomcat以及其他思考</title><link>https://techinsight.pages.dev/p/springboot%E4%BD%BF%E7%94%A8%E5%86%85%E7%BD%AE%E5%92%8C%E7%8B%AC%E7%AB%8Btomcat%E4%BB%A5%E5%8F%8A%E5%85%B6%E4%BB%96%E6%80%9D%E8%80%83/</link><pubDate>Sat, 28 Mar 2020 12:56:22 +0800</pubDate><guid>https://techinsight.pages.dev/p/springboot%E4%BD%BF%E7%94%A8%E5%86%85%E7%BD%AE%E5%92%8C%E7%8B%AC%E7%AB%8Btomcat%E4%BB%A5%E5%8F%8A%E5%85%B6%E4%BB%96%E6%80%9D%E8%80%83/</guid><description>&lt;p&gt;本文探讨了Springboot应用使用jar包和war包的区别，以及使用中的一些思考。我刚开始研究Java，一些想法可能不准确，欢迎提出宝贵意见。&lt;/p&gt;
&lt;p&gt;在开发中我们会使用嵌入式的tomcat容器，&lt;del&gt;但实际项目部署中一般不会这么做&lt;/del&gt;，事实证明大部分都是这么用的，独立的tomcat部署已经被淘汰了。下面在macOS环境下操作以下步骤：&lt;/p&gt;
&lt;p&gt;由于实验用的黑苹果不支持docker，以下所有操作需要的应用均使用macOS下的homebrew安装。&lt;/p&gt;
&lt;h2 id="创建一个简单的springboot-web应用"&gt;&lt;a href="#%e5%88%9b%e5%bb%ba%e4%b8%80%e4%b8%aa%e7%ae%80%e5%8d%95%e7%9a%84springboot-web%e5%ba%94%e7%94%a8" class="header-anchor"&gt;&lt;/a&gt;创建一个简单的Springboot Web应用
&lt;/h2&gt;&lt;p&gt;使用Spring Initializr创建一个基础的Springboot应用，只选择Web组件。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200321233213671.png"
loading="lazy"
alt="image-20200321233213671"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200321233443126.png"
loading="lazy"
alt="image-20200321233443126"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200321233515184.png"
loading="lazy"
alt="image-20200321233515184"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200321233707966.png"
loading="lazy"
alt="image-20200321233707966"
&gt;&lt;/p&gt;
&lt;p&gt;以上就是一个最简单的Springboot应用了。&lt;/p&gt;
&lt;h2 id="在嵌入式tomcat容器中运行web应用"&gt;&lt;a href="#%e5%9c%a8%e5%b5%8c%e5%85%a5%e5%bc%8ftomcat%e5%ae%b9%e5%99%a8%e4%b8%ad%e8%bf%90%e8%a1%8cweb%e5%ba%94%e7%94%a8" class="header-anchor"&gt;&lt;/a&gt;在嵌入式tomcat容器中运行Web应用
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200321233903263.png"
loading="lazy"
alt="image-20200321233903263"
&gt;&lt;/p&gt;
&lt;p&gt;可以看到，这个应用已经可以在嵌入式tomcat容器中运行了。注意，这里访问的路径是&lt;code&gt;http://localhost:8080/v1/hello/world&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id="打包编写完成的war包"&gt;&lt;a href="#%e6%89%93%e5%8c%85%e7%bc%96%e5%86%99%e5%ae%8c%e6%88%90%e7%9a%84war%e5%8c%85" class="header-anchor"&gt;&lt;/a&gt;打包编写完成的war包
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200321234037615.png"
loading="lazy"
alt="image-20200321234037615"
&gt;&lt;/p&gt;
&lt;p&gt;在Idea中执行&lt;code&gt;mvn pacakge&lt;/code&gt;，然后在&lt;code&gt;target&lt;/code&gt;目录中检查生成的war包。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200321234123292.png"
loading="lazy"
alt="image-20200321234123292"
&gt;&lt;/p&gt;
&lt;h2 id="将war包部署到独立的tomcat服务中"&gt;&lt;a href="#%e5%b0%86war%e5%8c%85%e9%83%a8%e7%bd%b2%e5%88%b0%e7%8b%ac%e7%ab%8b%e7%9a%84tomcat%e6%9c%8d%e5%8a%a1%e4%b8%ad" class="header-anchor"&gt;&lt;/a&gt;将war包部署到独立的tomcat服务中
&lt;/h2&gt;&lt;p&gt;这时候就可以关闭Idea中运行的嵌入式tomcat容器了，因为启动独立tomcat服务时默认端口也是8080，会有冲突导致无法启动。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200321234307345.png"
loading="lazy"
alt="image-20200321234307345"
&gt;&lt;/p&gt;
&lt;p&gt;可以执行&lt;code&gt;brew services start tomcat&lt;/code&gt;来启动web容器。这里为了观察服务的输出，使用前台运行的方式&lt;code&gt;catalina run&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200321234526625.png"
loading="lazy"
alt="image-20200321234526625"
&gt;&lt;/p&gt;
&lt;p&gt;可以看到tomcat服务已经成功启动，并监听了8080端口。&lt;/p&gt;
&lt;h2 id="访问独立tomcat服务中的应用"&gt;&lt;a href="#%e8%ae%bf%e9%97%ae%e7%8b%ac%e7%ab%8btomcat%e6%9c%8d%e5%8a%a1%e4%b8%ad%e7%9a%84%e5%ba%94%e7%94%a8" class="header-anchor"&gt;&lt;/a&gt;访问独立tomcat服务中的应用
&lt;/h2&gt;&lt;p&gt;将前面&lt;code&gt;target&lt;/code&gt;目录中的war包部署到tomcat的webapps目录中。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200321234837614.png"
loading="lazy"
alt="image-20200321234837614"
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200321234811148.png"
loading="lazy"
alt="image-20200321234811148"
&gt;&lt;/p&gt;
&lt;p&gt;可以看到，服务启动后，直接将war包复制到tomcat的工作目录中，服务就会检测到新war包的加入，并自动运行相应的服务。&lt;/p&gt;
&lt;p&gt;这时如果我们还像刚才那样访问&lt;code&gt;http://localhost:8080/v1/hello/world&lt;/code&gt;会怎样呢？&lt;/p&gt;
&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200321235028410.png"
loading="lazy"
alt="image-20200321235028410"
&gt;&lt;/p&gt;
&lt;p&gt;可以看到，是不存在这个路径的。&lt;/p&gt;
&lt;p&gt;问题出在哪儿呢？我们看一下webapps目录下都有哪些东西。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200321235109562.png"
loading="lazy"
alt="image-20200321235109562"
&gt;&lt;/p&gt;
&lt;p&gt;可以看到，我们是把应用部署在了web容器中，但web容器中却是有多个应用的，所以，访问应用时需要带上应用的名字。那名字是什么呢？当然就是&lt;code&gt;spring-in-tomcat-0.0.1-SNAPSHOT&lt;/code&gt;，试一下&lt;/p&gt;
&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200321235306362.png"
loading="lazy"
alt="image-20200321235306362"
&gt;&lt;/p&gt;
&lt;p&gt;果然可以了。&lt;/p&gt;
&lt;h2 id="访问应用的不同版本"&gt;&lt;a href="#%e8%ae%bf%e9%97%ae%e5%ba%94%e7%94%a8%e7%9a%84%e4%b8%8d%e5%90%8c%e7%89%88%e6%9c%ac" class="header-anchor"&gt;&lt;/a&gt;访问应用的不同版本
&lt;/h2&gt;&lt;p&gt;刚才是应用从不存在到存在，tomcat可以自动检测。我们再测试一下是否可以检测文件的变更。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200321235604989.png"
loading="lazy"
alt="image-20200321235604989"
&gt;&lt;/p&gt;
&lt;p&gt;这里做了一个微小的变化。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200321235643172.png"
loading="lazy"
alt="image-20200321235643172"
&gt;&lt;/p&gt;
&lt;p&gt;复制完成之后tomcat马上就检测到了文件的更新。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200321235735659.png"
loading="lazy"
alt="image-20200321235735659"
&gt;&lt;/p&gt;
&lt;p&gt;可以看到，应用更新也&lt;strong&gt;无感&lt;/strong&gt;的完成了。&lt;/p&gt;
&lt;h2 id="是否真的是无感"&gt;&lt;a href="#%e6%98%af%e5%90%a6%e7%9c%9f%e7%9a%84%e6%98%af%e6%97%a0%e6%84%9f" class="header-anchor"&gt;&lt;/a&gt;是否真的是无感？
&lt;/h2&gt;&lt;p&gt;在war包替换期间发生了什么？服务有没有中断呢？再做一个测试&lt;/p&gt;
&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200322001133216.png"
loading="lazy"
alt="image-20200322001133216"
&gt;&lt;/p&gt;
&lt;p&gt;首先启动30秒的并发请求，然后将重新编辑并打包的war包重新部署，结果发现有大量的非200的返回值。这就证明了并不是“软重启”，而是存在服务中断。那怎么证明不是wrk发起的请求太多，从而导致的服务繁忙呢？在正常情况下再跑一次测试就行了。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200322001417574.png"
loading="lazy"
alt="image-20200322001417574"
&gt;&lt;/p&gt;
&lt;p&gt;所以，重新部署服务导致服务中断的结论无误。&lt;/p&gt;
&lt;p&gt;从这个结论萌生了另外一个想法，这个访问的路径是带版本号的，这里是&lt;code&gt;0.0.1-SNAPSHOT&lt;/code&gt;，那如果我直接加一个&lt;code&gt;0.0.2-SNAPSHOT&lt;/code&gt;的版本进来，不就两个都能访问了？然后配合Nginx的反向代理和负载均衡，步进式的切流量，也就同时实现了灰度发布。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200322002053556.png"
loading="lazy"
alt="image-20200322002053556"
&gt;&lt;/p&gt;
&lt;h2 id="在tomcat前部署nginx反向代理"&gt;&lt;a href="#%e5%9c%a8tomcat%e5%89%8d%e9%83%a8%e7%bd%b2nginx%e5%8f%8d%e5%90%91%e4%bb%a3%e7%90%86" class="header-anchor"&gt;&lt;/a&gt;在tomcat前部署nginx反向代理
&lt;/h2&gt;&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200322003925168.png"
loading="lazy"
alt="image-20200322003925168"
&gt;&lt;/p&gt;
&lt;p&gt;添加一个如图的配置文件，这时就可以通过nginx访问spring的服务了。不出意外的话，改变nginx的配置并重新reload nginx的过程，服务是不会中断的。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://techinsight.pages.dev/images/image-20200322010427797.png"
loading="lazy"
alt="image-20200322010427797"
&gt;&lt;/p&gt;
&lt;p&gt;多次实验结果表明，在并发请求期间reload nginx的server配置，对服务可用性的影响非常小。&lt;/p&gt;
&lt;p&gt;关于Nginx的负载均衡相关内容这里不再过多涉及。&lt;/p&gt;
&lt;h2 id="总结"&gt;&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor"&gt;&lt;/a&gt;总结
&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;tomcat会自动加载新加入的war包&lt;/li&gt;
&lt;li&gt;tomcat更新同名的新war包时服务会中断&lt;/li&gt;
&lt;li&gt;可以利用tomcat可同时运行多个war包的特性提供不同版本的服务&lt;/li&gt;
&lt;li&gt;可以利用Nginx反向代理实现服务不中断&lt;/li&gt;
&lt;li&gt;可以利用Nginx的负载均衡实现灰度发布&lt;/li&gt;
&lt;/ol&gt;</description></item></channel></rss>