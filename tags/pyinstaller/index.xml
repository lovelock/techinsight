<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PyInstaller on Tech In Sight</title><link>https://techinsight.pages.dev/tags/pyinstaller/</link><description>Recent content in PyInstaller on Tech In Sight</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 09 Jul 2024 14:49:27 +0800</lastBuildDate><atom:link href="https://techinsight.pages.dev/tags/pyinstaller/index.xml" rel="self" type="application/rss+xml"/><item><title>可执行文件启动慢的原因分析</title><link>https://techinsight.pages.dev/p/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E5%90%AF%E5%8A%A8%E6%85%A2%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/</link><pubDate>Tue, 09 Jul 2024 14:49:27 +0800</pubDate><guid>https://techinsight.pages.dev/p/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E5%90%AF%E5%8A%A8%E6%85%A2%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/</guid><description>&lt;img src="https://techinsight.pages.dev/images/covers/python-growing.webp" alt="Featured image of post 可执行文件启动慢的原因分析" /&gt;&lt;p&gt;PyInstaller 和 Nuitka 在将 Python 应用程序打包成独立的可执行文件时，可能会导致启动时间变慢。以下是一些可能导致启动时间变慢的原因以及相应的解决方法：&lt;/p&gt;
&lt;h3 id="1-文件大小和加载时间"&gt;&lt;a href="#1-%e6%96%87%e4%bb%b6%e5%a4%a7%e5%b0%8f%e5%92%8c%e5%8a%a0%e8%bd%bd%e6%97%b6%e9%97%b4" class="header-anchor"&gt;&lt;/a&gt;1. &lt;strong&gt;文件大小和加载时间&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;原因&lt;/strong&gt;：打包后的可执行文件通常较大，包含所有依赖项和 Python 解释器。较大的文件可能需要更长的时间来加载和初始化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;--onefile&lt;/code&gt; 选项将所有内容打包成一个单独的可执行文件，但这可能会增加加载时间。&lt;/li&gt;
&lt;li&gt;尝试使用 &lt;code&gt;--onedir&lt;/code&gt; 选项将所有内容打包成一个目录，这样可以减少单个文件的加载时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="2-代码优化"&gt;&lt;a href="#2-%e4%bb%a3%e7%a0%81%e4%bc%98%e5%8c%96" class="header-anchor"&gt;&lt;/a&gt;2. &lt;strong&gt;代码优化&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;原因&lt;/strong&gt;：打包后的可执行文件可能包含一些不必要的代码或模块，这些代码在启动时会被加载和初始化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优化代码，移除不必要的导入和初始化操作。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;if __name__ == &amp;quot;__main__&amp;quot;:&lt;/code&gt; 确保只在主程序中执行必要的代码。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="3-冻结时间freeze-time"&gt;&lt;a href="#3-%e5%86%bb%e7%bb%93%e6%97%b6%e9%97%b4freeze-time" class="header-anchor"&gt;&lt;/a&gt;3. &lt;strong&gt;冻结时间（Freeze Time）&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;原因&lt;/strong&gt;：Nuitka 在编译过程中会将 Python 代码转换为 C++ 代码，并进行优化。这个过程可能会导致启动时间变慢。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 Nuitka 的 &lt;code&gt;--standalone&lt;/code&gt; 选项生成独立的可执行文件，但可能会增加启动时间。&lt;/li&gt;
&lt;li&gt;尝试使用 Nuitka 的 &lt;code&gt;--onefile&lt;/code&gt; 选项将所有内容打包成一个单独的可执行文件，但这可能会进一步增加启动时间。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="4-动态链接库dll加载"&gt;&lt;a href="#4-%e5%8a%a8%e6%80%81%e9%93%be%e6%8e%a5%e5%ba%93dll%e5%8a%a0%e8%bd%bd" class="header-anchor"&gt;&lt;/a&gt;4. &lt;strong&gt;动态链接库（DLL）加载&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;原因&lt;/strong&gt;：打包后的可执行文件可能需要加载多个动态链接库（DLL），这可能会增加启动时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保所有依赖项的 DLL 文件都正确包含在打包文件中。&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;patchelf&lt;/code&gt; 工具（Linux）或 &lt;code&gt;rcedit&lt;/code&gt; 工具（Windows）调整可执行文件的依赖项。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="5-调试信息"&gt;&lt;a href="#5-%e8%b0%83%e8%af%95%e4%bf%a1%e6%81%af" class="header-anchor"&gt;&lt;/a&gt;5. &lt;strong&gt;调试信息&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;原因&lt;/strong&gt;：打包过程中可能包含调试信息，这会增加文件大小并影响启动时间。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;--strip&lt;/code&gt; 选项（Linux）或 &lt;code&gt;/DEBUG:NONE&lt;/code&gt; 选项（Windows）移除调试信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="6-缓存和优化"&gt;&lt;a href="#6-%e7%bc%93%e5%ad%98%e5%92%8c%e4%bc%98%e5%8c%96" class="header-anchor"&gt;&lt;/a&gt;6. &lt;strong&gt;缓存和优化&lt;/strong&gt;
&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;原因&lt;/strong&gt;：首次运行打包后的可执行文件时，可能需要进行一些初始化和优化操作。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保在打包过程中启用所有优化选项，例如 Nuitka 的 &lt;code&gt;--lto&lt;/code&gt; 选项。&lt;/li&gt;
&lt;li&gt;多次运行可执行文件，以利用缓存和优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="总结"&gt;&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor"&gt;&lt;/a&gt;总结
&lt;/h3&gt;&lt;p&gt;PyInstaller 和 Nuitka 打包后的可执行文件启动时间变慢可能是由于文件大小、代码优化、冻结时间、动态链接库加载、调试信息以及缓存和优化等因素导致的。通过优化打包选项、代码和依赖项，可以减少启动时间并提高性能。&lt;/p&gt;</description></item></channel></rss>