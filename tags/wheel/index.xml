<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wheel on Tech In Sight</title><link>https://techinsight.pages.dev/tags/wheel/</link><description>Recent content in Wheel on Tech In Sight</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 08 Jul 2024 14:25:52 +0800</lastBuildDate><atom:link href="https://techinsight.pages.dev/tags/wheel/index.xml" rel="self" type="application/rss+xml"/><item><title>Python构建工具</title><link>https://techinsight.pages.dev/p/python%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</link><pubDate>Mon, 08 Jul 2024 14:25:52 +0800</pubDate><guid>https://techinsight.pages.dev/p/python%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</guid><description>&lt;img src="https://techinsight.pages.dev/images/covers/python-builders.png" alt="Featured image of post Python构建工具" /&gt;&lt;p&gt;虽然 Python 是一种解释型脚本语言，不需要像 C 或 C++ 那样进行编译，但在开发和发布 Python 项目时，仍然有一些构建步骤是必要的。这些步骤可以包括依赖管理、打包、测试、文档生成等。因此，Python 项目通常需要一些构建工具来简化和自动化这些任务。&lt;/p&gt;
&lt;h3 id="常见的-python-构建工具"&gt;&lt;a href="#%e5%b8%b8%e8%a7%81%e7%9a%84-python-%e6%9e%84%e5%bb%ba%e5%b7%a5%e5%85%b7" class="header-anchor"&gt;&lt;/a&gt;常见的 Python 构建工具
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;setuptools&lt;/code&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：提供基础的打包和分发功能，支持依赖管理、入口点和扩展等。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用&lt;/strong&gt;：通过 &lt;code&gt;setup.py&lt;/code&gt; 和 &lt;code&gt;pyproject.toml&lt;/code&gt; 文件进行配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;wheel&lt;/code&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：将 Python 项目打包成 &lt;code&gt;.whl&lt;/code&gt; 格式的二进制分发包，方便用户安装。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用&lt;/strong&gt;：通常与 &lt;code&gt;setuptools&lt;/code&gt; 一起使用，通过 &lt;code&gt;python setup.py bdist_wheel&lt;/code&gt; 命令生成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;pip&lt;/code&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：主要用于包管理和安装，但也支持从源代码进行构建和安装。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用&lt;/strong&gt;：通过 &lt;code&gt;requirements.txt&lt;/code&gt; 或 &lt;code&gt;pyproject.toml&lt;/code&gt; 文件定义依赖。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;build&lt;/code&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：一个现代的构建工具，用于生成源代码分发包（&lt;code&gt;sdist&lt;/code&gt;）和二进制分发包（&lt;code&gt;wheel&lt;/code&gt;）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用&lt;/strong&gt;：通过 &lt;code&gt;python -m build&lt;/code&gt; 命令执行。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;tox&lt;/code&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：用于自动化测试和环境管理，支持在多个 Python 版本和虚拟环境中运行测试。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用&lt;/strong&gt;：通过 &lt;code&gt;tox.ini&lt;/code&gt; 文件进行配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;flit&lt;/code&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：一个简化的打包和发布工具，主要用于纯 Python 包。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用&lt;/strong&gt;：通过 &lt;code&gt;pyproject.toml&lt;/code&gt; 文件进行配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;poetry&lt;/code&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：一个现代的依赖管理和打包工具，集成了构建、依赖管理、版本管理和发布等功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用&lt;/strong&gt;：通过 &lt;code&gt;pyproject.toml&lt;/code&gt; 文件进行配置，并且有自己的 &lt;code&gt;poetry.lock&lt;/code&gt; 文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;pbr&lt;/code&gt;&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;功能&lt;/strong&gt;：专注于简化 &lt;code&gt;setuptools&lt;/code&gt; 配置，自动化版本控制和包信息管理。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;使用&lt;/strong&gt;：通过 &lt;code&gt;setup.cfg&lt;/code&gt; 文件进行配置。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="为什么-python-需要构建"&gt;&lt;a href="#%e4%b8%ba%e4%bb%80%e4%b9%88-python-%e9%9c%80%e8%a6%81%e6%9e%84%e5%bb%ba" class="header-anchor"&gt;&lt;/a&gt;为什么 Python 需要构建？
&lt;/h3&gt;&lt;p&gt;尽管 Python 是解释型语言，但在实际开发和发布过程中，仍然有一些任务需要构建步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;依赖管理&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;确保项目在不同环境中有相同的依赖版本，避免兼容性问题。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;打包和分发&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将项目打包成标准格式（如 &lt;code&gt;wheel&lt;/code&gt; 或 &lt;code&gt;sdist&lt;/code&gt;），方便用户安装和使用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;性能优化&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过构建，将一些关键模块编译为 C 扩展，以提高性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;代码检查和测试&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自动化运行代码检查工具（如 &lt;code&gt;flake8&lt;/code&gt;、&lt;code&gt;pylint&lt;/code&gt;）和测试框架（如 &lt;code&gt;pytest&lt;/code&gt;），确保代码质量。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;文档生成&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用工具（如 &lt;code&gt;Sphinx&lt;/code&gt;）生成项目文档，确保文档的一致性和可维护性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="构建生成的结果"&gt;&lt;a href="#%e6%9e%84%e5%bb%ba%e7%94%9f%e6%88%90%e7%9a%84%e7%bb%93%e6%9e%9c" class="header-anchor"&gt;&lt;/a&gt;构建生成的结果
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;源代码分发包（sdist）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含项目的源代码和元数据，通常是一个 &lt;code&gt;.tar.gz&lt;/code&gt; 文件。&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;python setup.py sdist&lt;/code&gt; 或 &lt;code&gt;python -m build&lt;/code&gt; 生成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;二进制分发包（wheel）&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;包含编译后的二进制文件，通常是一个 &lt;code&gt;.whl&lt;/code&gt; 文件。&lt;/li&gt;
&lt;li&gt;通过 &lt;code&gt;python setup.py bdist_wheel&lt;/code&gt; 或 &lt;code&gt;python -m build&lt;/code&gt; 生成。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;安装包&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最终用户可以通过 &lt;code&gt;pip install&lt;/code&gt; 命令安装打包好的项目，而不需要关心底层的构建细节。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="总结"&gt;&lt;a href="#%e6%80%bb%e7%bb%93" class="header-anchor"&gt;&lt;/a&gt;总结
&lt;/h3&gt;&lt;p&gt;尽管 Python 是解释型语言，但项目的开发和发布过程仍然需要构建步骤来管理依赖、打包、测试和优化。通过使用适当的构建工具，可以显著简化和自动化这些任务，提高项目的可维护性和可移植性。&lt;/p&gt;</description></item></channel></rss>